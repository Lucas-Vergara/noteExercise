{"version":3,"sources":["components/NoteBox/NoteBox.tsx","components/Sidebar/Sidebar.tsx","components/Timer/PlayButton.tsx","components/Timer/EndButton.tsx","components/Timer/RestartButton.tsx","components/Timer/Timer.tsx","components/Layout/notes.tsx","components/Layout/Layout.tsx","features/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["NoteBox","props","note","setStart","React","createElement","Box","display","onClick","prevStart","Card","sx","backgroundColor","borderRadius","minWidth","minHeight","boxShadow","cursor","CardContent","fontSize","color","justifyContent","alignItems","Sidebar","_ref","collapsed","setTimerTotal","setTimerInterval","_useState","useState","_useState2","_slicedToArray","sidebarCollapsed","setSidebarCollapsed","_useState3","_useState4","timerTotal","setTimerTotalState","_useState5","_useState6","timerInterval","setTimerIntervalState","handleSetTimerTotal","value","handleSetTimerInterval","SidebarComponent","style","height","Menu","renderExpandIcon","MenuItem","MenuIcon","SubMenu","icon","TimerIcon","label","TextField","variant","InputProps","endAdornment","InputAdornment","position","onChange","e","parseFloat","target","isNaN","parseInt","PlayButton","running","IconButton","background","transition","&:hover","transform","PauseIcon","PlayArrowIcon","EndButton","StopIcon","RestartButton","RestartAltIcon","Timer","start","notes","removeNote","setCurrentNote","time","setTime","setRunning","useEffect","prevRunning","timer","setInterval","prevTime","clearInterval","randomIndex","Math","floor","random","length","selectedNote","intervalTimer","handleKeyDown","event","code","handleKeyPress","document","addEventListener","removeEventListener","hours","minutes","seconds","formattedHours","toString","padStart","formattedMinutes","formattedSeconds","concat","formatTime","gap","activeElement","HTMLElement","blur","allNotes","Layout","_useState7","_useState8","setNotes","_useState9","_useState10","currentNote","updatedNotes","filter","n","Grid","container","item","xs","flexDirection","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.3dbde957.chunk.js","sourcesContent":["import { Box, Card, CardContent } from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\ntype Props = {\r\n  note: string;\r\n  notes: string[];\r\n  setStart: React.Dispatch<React.SetStateAction<boolean>>;\r\n  removeNote: (note: string) => void;\r\n  setCurrentNote: (note: string) => void;\r\n};\r\n\r\nfunction NoteBox(props: Props) {\r\n  const { note, setStart } = props;\r\n  const handleClick = (): void => {\r\n    setStart((prevStart) => !prevStart);\r\n  };\r\n\r\n  return (\r\n    <Box display=\"inline-block\" onClick={handleClick}>\r\n      <Card\r\n        sx={{\r\n          backgroundColor: \"#415986ff\",\r\n          borderRadius: \"50%\",\r\n          minWidth: \"20vw\",\r\n          minHeight: \"20vw\",\r\n          boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.3)\",\r\n          cursor: \"pointer\",\r\n        }}\r\n      >\r\n        <CardContent\r\n          sx={{\r\n            fontSize: \"25vh\",\r\n            color: \"#FBF3EAff\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          {note}\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default NoteBox;\r\n","import { CSSObject, InputAdornment, TextField } from \"@mui/material\";\r\nimport React, { useState } from \"react\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\nimport TimerIcon from \"@mui/icons-material/Timer\";\r\n\r\nimport { Sidebar as SidebarComponent, Menu, MenuItem, SubMenu } from \"react-pro-sidebar\";\r\n\r\ninterface SidebarProps {\r\n  collapsed: boolean;\r\n  timerTotal: number;\r\n  timerInterval: number;\r\n  setTimerTotal: (value: number) => void;\r\n  setTimerInterval: (value: number) => void;\r\n}\r\n\r\nconst Sidebar: React.FC<SidebarProps> = ({ collapsed,setTimerTotal, setTimerInterval }) => {\r\n  const [sidebarCollapsed, setSidebarCollapsed] = useState<boolean>(collapsed);\r\n  const [timerTotal, setTimerTotalState] = useState<number>(900); // 15 MINUTES\r\n  const [timerInterval, setTimerIntervalState] = useState<number>(20); \r\n\r\n  const handleToggleSidebar = () => {\r\n    setSidebarCollapsed(!sidebarCollapsed);\r\n  };\r\n\r\n  const handleSetTimerTotal = (value: number) => {\r\n    setTimerTotal(value);\r\n    setTimerTotalState(value);\r\n  };\r\n\r\n  const handleSetTimerInterval = (value: number) => {\r\n    setTimerInterval(value);\r\n    setTimerIntervalState(value);\r\n  };\r\n\r\n  return (\r\n    <SidebarComponent\r\n      collapsed={sidebarCollapsed}\r\n      style={{ height: \"100%\", color: \"#658D87ff\" }}\r\n    >\r\n      <Menu renderExpandIcon={() => null}>\r\n        <MenuItem onClick={handleToggleSidebar}>\r\n          <MenuIcon />\r\n        </MenuItem>\r\n        <SubMenu icon={<TimerIcon />} label=\"Ajustes del Reloj\">\r\n          <MenuItem>\r\n            <TextField\r\n              value={timerTotal / 60}\r\n              label=\"Tiempo Total\"\r\n              variant=\"standard\"\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position=\"start\">minutos</InputAdornment>,\r\n              }}\r\n              onChange={(e) => {\r\n                const value = parseFloat(e.target.value);\r\n                if (isNaN(value)) {\r\n                  handleSetTimerTotal(0);\r\n                } else {\r\n                  handleSetTimerTotal(value * 60);\r\n                }\r\n              }}\r\n            />\r\n          </MenuItem>\r\n          <MenuItem>\r\n            <TextField\r\n              value={timerInterval}\r\n              label=\"Intervalo\"\r\n              variant=\"standard\"\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position=\"start\">segundos</InputAdornment>,\r\n              }}\r\n              onChange={(e) => {\r\n                const value = parseInt(e.target.value);\r\n                if (isNaN(value)) {\r\n                  handleSetTimerInterval(0);\r\n                } else {\r\n                  handleSetTimerInterval(value);\r\n                }\r\n              }}\r\n            />\r\n          </MenuItem>\r\n        </SubMenu>\r\n      </Menu>\r\n    </SidebarComponent>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\";\r\nimport PauseIcon from \"@mui/icons-material/Pause\";\r\n\r\ntype Props = {\r\n  running: boolean;\r\n};\r\n\r\nfunction PlayButton(props: Props) {\r\n  const { running } = props;\r\n  return (\r\n    <IconButton\r\n      sx={{\r\n        borderRadius: \"50%\",\r\n        minWidth: \"4vw\",\r\n        minHeight: \"4vw\",\r\n        background:\r\n          \"radial-gradient(circle, rgba(198, 75, 74, 0.6), rgba(198, 75, 74, 1))\",\r\n        boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.3)\",\r\n        transition: \"transform 0.2s ease-in-out\",\r\n        \"&:hover\": {\r\n          transform: \"scale(1.1)\",\r\n        },\r\n      }}\r\n    >\r\n      {running ? (\r\n        <PauseIcon sx={{ color: \"white\" }} />\r\n      ) : (\r\n        <PlayArrowIcon sx={{ color: \"white\" }} />\r\n      )}\r\n    </IconButton>\r\n  );\r\n}\r\n\r\nexport default PlayButton;\r\n","import React from \"react\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport StopIcon from '@mui/icons-material/Stop';\r\n\r\nconst EndButton: React.FC = () => {\r\n  return (\r\n    <IconButton\r\n      sx={{\r\n        borderRadius: \"50%\",\r\n        minWidth: \"4vw\",\r\n        minHeight: \"4vw\",\r\n        background:\r\n          \"radial-gradient(circle, rgba(204, 153, 0, 0.4), rgba(255, 219, 88, 1))\",\r\n        boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.3)\",\r\n        transition: \"transform 0.2s ease-in-out\",\r\n        \"&:hover\": {\r\n          transform: \"scale(1.1)\",\r\n        },\r\n      }}\r\n    >\r\n      <StopIcon sx={{ color: \"white\" }} />\r\n    </IconButton>\r\n  );\r\n};\r\n\r\nexport default EndButton;\r\n","import React from \"react\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\r\n\r\nconst RestartButton: React.FC = () => {\r\n  return (\r\n    <IconButton\r\n      sx={{\r\n        borderRadius: \"50%\",\r\n        minWidth: \"4vw\",\r\n        minHeight: \"4vw\",\r\n        background: \"radial-gradient(circle, rgba(101, 141, 135, 0.6), rgba(101, 141, 135, 1))\",\r\n        boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.3)\",\r\n        transition: \"transform 0.2s ease-in-out\",\r\n        \"&:hover\": {\r\n          transform: \"scale(1.1)\",\r\n        },\r\n      }}\r\n    >\r\n      <RestartAltIcon\r\n        sx={{\r\n          color: \"white\", \r\n        }}\r\n      />{\" \"}\r\n    </IconButton>\r\n  );\r\n};\r\n\r\nexport default RestartButton;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport PlayButton from \"./PlayButton\";\r\nimport EndButton from \"./EndButton\";\r\nimport RestartButton from \"./RestartButton\";\r\n\r\ntype Props = {\r\n  timerTotal: number;\r\n  timerInterval: number;\r\n  start: boolean;\r\n  notes: string[];\r\n  setCurrentNote: (note: string) => void;\r\n  removeNote: (note: string) => void;\r\n};\r\n\r\nfunction Timer(props: Props) {\r\n  const {\r\n    timerTotal,\r\n    timerInterval,\r\n    start,\r\n    removeNote,\r\n    notes,\r\n    setCurrentNote,\r\n  } = props;\r\n  const [time, setTime] = useState<number>(timerTotal);\r\n  const [running, setRunning] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    setRunning((prevRunning) => !prevRunning);\r\n  }, [start]);\r\n\r\n  useEffect(() => {\r\n    setTime(timerTotal);\r\n  }, [timerTotal]);\r\n\r\n  useEffect(() => {\r\n    if (running) {\r\n      const timer = setInterval(() => {\r\n        setTime((prevTime) => prevTime - 1);\r\n      }, 1000);\r\n      return () => clearInterval(timer);\r\n    }\r\n  }, [running]);\r\n\r\n  // change notes\r\n  useEffect(() => {\r\n    if (running) {\r\n      if (time === timerTotal) {\r\n        const randomIndex = Math.floor(Math.random() * notes.length);\r\n        const selectedNote = notes[randomIndex];\r\n        // removeNote(selectedNote);\r\n        setCurrentNote(selectedNote);\r\n      }\r\n      const intervalTimer = setInterval(() => {\r\n        const randomIndex = Math.floor(Math.random() * notes.length);\r\n        const selectedNote = notes[randomIndex];\r\n        // removeNote(selectedNote);\r\n        setCurrentNote(selectedNote);\r\n      }, timerInterval * 1000);\r\n\r\n      return () => clearInterval(intervalTimer);\r\n    }\r\n  }, [timerInterval, running]);\r\n\r\n  useEffect(() => {\r\n    if (time <= 0) {\r\n      setRunning(false);\r\n    }\r\n  }, [time, timerInterval]);\r\n\r\n  const formatTime = (time: number): string => {\r\n    const hours = Math.floor(time / 3600);\r\n    const minutes = Math.floor((time % 3600) / 60);\r\n    const seconds = time % 60;\r\n\r\n    const formattedHours = hours.toString().padStart(2, \"0\");\r\n    const formattedMinutes = minutes.toString().padStart(2, \"0\");\r\n    const formattedSeconds = seconds.toString().padStart(2, \"0\");\r\n\r\n    return `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\r\n  };\r\n\r\n  const handlePauseContinue = () => {\r\n    setRunning((prevRunning) => !prevRunning);\r\n    if (document.activeElement instanceof HTMLElement) {\r\n      document.activeElement.blur();\r\n    }\r\n  };\r\n\r\n  const handleFinish = () => {\r\n    setTime(0);\r\n    setRunning(false);\r\n    if (document.activeElement instanceof HTMLElement) {\r\n      document.activeElement.blur();\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setTime(timerTotal);\r\n    setRunning(false);\r\n    if (document.activeElement instanceof HTMLElement) {\r\n      document.activeElement.blur();\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (event: KeyboardEvent) => {\r\n    if (event.code === \"Space\") {\r\n      setRunning((prevRunning) => !prevRunning);\r\n      if (time === 0) {\r\n        setTime(timerTotal)\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      handleKeyPress(event);\r\n    };\r\n    document.addEventListener(\"keydown\", handleKeyDown);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyDown);\r\n    };\r\n  }, [time]);\r\n\r\n  return time > 0 ? (\r\n    <div>\r\n      <div style={{ fontSize: \"7vh\", color: \"#415986ff\" }}>\r\n        {formatTime(time)}\r\n      </div>\r\n      <div style={{ display: \"flex\", gap: 10 }}>\r\n        <div onClick={handlePauseContinue}>\r\n          <PlayButton running={running} />\r\n        </div>\r\n        <div onClick={handleReset}>\r\n          <RestartButton />\r\n        </div>\r\n        <div onClick={handleFinish}>\r\n          <EndButton />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n}\r\n\r\nexport default Timer;\r\n","export const allNotes: string[] = [\r\n  \"A\",\r\n  \"B\",\r\n  \"C\",\r\n  \"D\",\r\n  \"E\",\r\n  \"F\",\r\n  \"G\",\r\n  \"A♯\",\r\n  \"B♯\",\r\n  \"C♯\",\r\n  \"D♯\",\r\n  \"E♯\",\r\n  \"F♯\",\r\n  \"G♯\",\r\n  \"A♭\",\r\n  \"B♭\",\r\n  \"C♭\",\r\n  \"D♭\",\r\n  \"E♭\",\r\n  \"F♭\",\r\n  \"G♭\",\r\n];\r\n","import React, { useState, useEffect } from \"react\";\r\nimport NoteBox from \"../NoteBox/NoteBox\";\r\nimport { Box, Grid } from \"@mui/material\";\r\nimport Sidebar from \"../Sidebar/Sidebar\";\r\nimport Timer from \"../Timer/Timer\";\r\nimport { allNotes } from \"./notes\";\r\n\r\nconst Layout = () => {\r\n  const [start, setStart] = useState<boolean>(false);\r\n  const [timerTotal, setTimerTotal] = useState<number>(900); // 15 MINUTES\r\n  const [timerInterval, setTimerInterval] = useState<number>(20);\r\n\r\n  const [notes, setNotes] = useState<string[]>(allNotes);\r\n  const [currentNote, setCurrentNote] = useState<string>(\"𝄞\");\r\n\r\n  const removeNote = (note: string) => {\r\n    const updatedNotes = notes.filter((n) => n !== note);\r\n    setNotes(updatedNotes);\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      sx={{\r\n        height: \"100vh\",\r\n        backgroundColor: \"#FBF3EAff\",\r\n      }}\r\n    >\r\n      <Grid item xs={2}>\r\n        <Sidebar\r\n          collapsed={true}\r\n          timerTotal={timerTotal}\r\n          timerInterval={timerInterval}\r\n          setTimerTotal={setTimerTotal}\r\n          setTimerInterval={setTimerInterval}\r\n        />\r\n      </Grid>\r\n      <Grid\r\n        item\r\n        xs={8}\r\n        sx={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <NoteBox\r\n          note={currentNote}\r\n          notes={notes}\r\n          setStart={setStart}\r\n          removeNote={removeNote}\r\n          setCurrentNote={setCurrentNote}\r\n        />\r\n        <Timer\r\n          timerTotal={timerTotal}\r\n          timerInterval={timerInterval}\r\n          start={start}\r\n          removeNote={removeNote}\r\n          notes={notes}\r\n          setCurrentNote={setCurrentNote}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React from 'react';\r\nimport Layout from '../../components/Layout/Layout';\r\n\r\nfunction App() {\r\n  return (\r\n    <Layout/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './features/App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}